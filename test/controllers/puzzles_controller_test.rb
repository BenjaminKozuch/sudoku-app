require 'test_helper'

class PuzzlesControllerTest < ActionController::TestCase


  def setup
    @puzzle = puzzles(:one)
  end

  #index
  test "should get index" do
    get :index
    assert_response :success
    assert_not_nil assigns(:puzzles)
  end

  #show
  test "should get show" do
    get(:show, {'id' => "1"})
  end

  #create
  test "should create puzzle" do
    assert_difference('Puzzle.count', 1) do
      post :create, puzzle: { "0, 0" =>  "", "0, 1" =>  "", "0, 2" => "9", "0, 3" => "5", "0, 4" =>  "", "0, 5" =>  "", "0, 6" =>  "", "0, 7" =>  "", "0, 8" => "8",
                              "1, 0" =>  "", "1, 1" =>  "", "1, 2" => "5", "1, 3" => "7", "1, 4" =>  "", "1, 5" => "6", "1, 6" => "4", "1, 7" => "9", "1, 8" =>  "",
                              "2, 0" =>  "", "2, 1" => "7", "2, 2" => "1", "2, 3" =>  "", "2, 4" =>  "", "2, 5" =>  "", "2, 6" =>  "", "2, 7" => "3", "2, 8" => "5",
                              "3, 0" =>  "", "3, 1" => "3", "3, 2" =>  "", "3, 3" =>  "", "3, 4" => "9", "3, 5" =>  "", "3, 6" =>  "", "3, 7" =>  "", "3, 8" => "2",
                              "4, 0" =>  "", "4, 1" => "1", "4, 2" => "8", "4, 3" => "3", "4, 4" => "4", "4, 5" => "2", "4, 6" => "9", "4, 7" => "6", "4, 8" =>  "",
                              "5, 0" => "2", "5, 1" =>  "", "5, 2" =>  "", "5, 3" =>  "", "5, 4" => "6", "5, 5" =>  "", "5, 6" =>  "", "5, 7" => "4", "5, 8" =>  "",
                              "6, 0" => "9", "6, 1" => "2", "6, 2" =>  "", "6, 3" =>  "", "6, 4" =>  "", "6, 5" =>  "", "6, 6" => "7", "6, 7" => "6", "6, 8" =>  "",
                              "7, 0" =>  "", "7, 1" => "7", "7, 2" => "4", "7, 3" => "6", "7, 4" =>  "", "7, 5" => "9", "7, 6" => "8", "7, 7" =>  "", "7, 8" =>  "",
                              "8, 0" => "3", "8, 1" =>  "", "8, 2" =>  "", "8, 3" =>  "", "8, 4" =>  "", "8, 5" => "2", "8, 6" => "4", "8, 7" =>  "", "8, 8" =>  "",
                              }
    end
    assert_equal assigns(:puzzle).send("0, 2"), "9"
    assert_redirected_to puzzle_path(assigns(:puzzle))
    assert_equal assigns(:puzzle).original, { "0, 0" =>  "", "0, 1" =>  "", "0, 2" => "9", "0, 3" => "5", "0, 4" =>  "", "0, 5" =>  "", "0, 6" =>  "", "0, 7" =>  "", "0, 8" => "8",
                                              "1, 0" =>  "", "1, 1" =>  "", "1, 2" => "5", "1, 3" => "7", "1, 4" =>  "", "1, 5" => "6", "1, 6" => "4", "1, 7" => "9", "1, 8" =>  "",
                                              "2, 0" =>  "", "2, 1" => "7", "2, 2" => "1", "2, 3" =>  "", "2, 4" =>  "", "2, 5" =>  "", "2, 6" =>  "", "2, 7" => "3", "2, 8" => "5",
                                              "3, 0" =>  "", "3, 1" => "3", "3, 2" =>  "", "3, 3" =>  "", "3, 4" => "9", "3, 5" =>  "", "3, 6" =>  "", "3, 7" =>  "", "3, 8" => "2",
                                              "4, 0" =>  "", "4, 1" => "1", "4, 2" => "8", "4, 3" => "3", "4, 4" => "4", "4, 5" => "2", "4, 6" => "9", "4, 7" => "6", "4, 8" =>  "",
                                              "5, 0" => "2", "5, 1" =>  "", "5, 2" =>  "", "5, 3" =>  "", "5, 4" => "6", "5, 5" =>  "", "5, 6" =>  "", "5, 7" => "4", "5, 8" =>  "",
                                              "6, 0" => "9", "6, 1" => "2", "6, 2" =>  "", "6, 3" =>  "", "6, 4" =>  "", "6, 5" =>  "", "6, 6" => "7", "6, 7" => "6", "6, 8" =>  "",
                                              "7, 0" =>  "", "7, 1" => "7", "7, 2" => "4", "7, 3" => "6", "7, 4" =>  "", "7, 5" => "9", "7, 6" => "8", "7, 7" =>  "", "7, 8" =>  "",
                                              "8, 0" => "3", "8, 1" =>  "", "8, 2" =>  "", "8, 3" =>  "", "8, 4" =>  "", "8, 5" => "2", "8, 6" => "4", "8, 7" =>  "", "8, 8" =>  "",
                                              }
    assert_equal assigns(:puzzle).board,[[ "", "","9", "", "","5", "","7","1"],
                                         ["5", "", "","7", "","6", "", "", ""],
                                         [ "", "","8","4","9", "", "","3","5"],
                                         [ "","3", "", "","1","8","2", "", ""],
                                         [ "","9", "","3","4","2", "","6", ""],
                                         [ "", "","2","9","6", "", "","4", ""],
                                         ["9","2", "", "","7","4","3", "", ""],
                                         [ "", "", "","6", "","9", "", "","2"],
                                         ["7","6", "","8", "", "","4", "", ""]]
    assert_equal assigns(:puzzle).solution, { "0, 0" => "6", "0, 1" => "4", "0, 2" => "9", "0, 3" => "5", "0, 4" => "1", "0, 5" => "3", "0, 6" => "2", "0, 7" => "7", "0, 8" => "8",
                                              "1, 0" => "2", "1, 1" => "3", "1, 2" => "5", "1, 3" => "7", "1, 4" => "8", "1, 5" => "6", "1, 6" => "4", "1, 7" => "9", "1, 8" => "1",
                                              "2, 0" => "8", "2, 1" => "7", "2, 2" => "1", "2, 3" => "9", "2, 4" => "2", "2, 5" => "4", "2, 6" => "6", "2, 7" => "3", "2, 8" => "5",
                                              "3, 0" => "4", "3, 1" => "3", "3, 2" => "6", "3, 3" => "1", "3, 4" => "9", "3, 5" => "7", "3, 6" => "8", "3, 7" => "5", "3, 8" => "2",
                                              "4, 0" => "5", "4, 1" => "1", "4, 2" => "8", "4, 3" => "3", "4, 4" => "4", "4, 5" => "2", "4, 6" => "9", "4, 7" => "6", "4, 8" => "7",
                                              "5, 0" => "2", "5, 1" => "9", "5, 2" => "7", "5, 3" => "5", "5, 4" => "6", "5, 5" => "8", "5, 6" => "1", "5, 7" => "4", "5, 8" => "3",
                                              "6, 0" => "9", "6, 1" => "2", "6, 2" => "5", "6, 3" => "3", "6, 4" => "8", "6, 5" => "4", "6, 6" => "7", "6, 7" => "6", "6, 8" => "1",
                                              "7, 0" => "1", "7, 1" => "7", "7, 2" => "4", "7, 3" => "6", "7, 4" => "5", "7, 5" => "9", "7, 6" => "8", "7, 7" => "2", "7, 8" => "3",
                                              "8, 0" => "3", "8, 1" => "8", "8, 2" => "6", "8, 3" => "7", "8, 4" => "1", "8, 5" => "2", "8, 6" => "4", "8, 7" => "5", "8, 8" => "9"
                                              }
    assert_equal assigns(:puzzle).send("0, 2"), "9"
    assert_equal assigns(:puzzle).send("1, 2"), "5"
    assert_equal assigns(:puzzle).send("2, 1"), "7"
    assert_equal assigns(:puzzle).send("3, 8"), "2"
    assert_equal assigns(:puzzle).send("4, 4"), "4"
    assert_equal assigns(:puzzle).send("5, 0"), "2"
    assert_equal assigns(:puzzle).send("6, 1"), "2"
    assert_equal assigns(:puzzle).send("7, 2"), "4"
    assert_equal assigns(:puzzle).send("8, 6"), "4"

  end

  #update
  test "should update puzzle" do
    patch :update, id: @puzzle.id, puzzle: {"0, 0" => "4", "0, 2"=> "7"}
    assert_equal assigns(:puzzle).send("0, 0"), "4"
    assert_equal assigns(:puzzle).send("0, 2"), "7"
    assert_redirected_to action: :solve
  end

  test "should destroy puzzle" do
    assert_difference("Puzzle.count", -1 ) do
      delete :destroy, id: @puzzle.id
    end
    assert_redirected_to puzzles_path
  end

  test "should revert puzzle" do
    post :create, puzzle: { "0, 0" =>  "", "0, 1" =>  "", "0, 2" => "9", "0, 3" => "5", "0, 4" =>  "", "0, 5" =>  "", "0, 6" =>  "", "0, 7" =>  "", "0, 8" => "8",
                              "1, 0" =>  "", "1, 1" =>  "", "1, 2" => "5", "1, 3" => "7", "1, 4" =>  "", "1, 5" => "6", "1, 6" => "4", "1, 7" => "9", "1, 8" =>  "",
                              "2, 0" =>  "", "2, 1" => "7", "2, 2" => "1", "2, 3" =>  "", "2, 4" =>  "", "2, 5" =>  "", "2, 6" =>  "", "2, 7" => "3", "2, 8" => "5",
                              "3, 0" =>  "", "3, 1" => "3", "3, 2" =>  "", "3, 3" =>  "", "3, 4" => "9", "3, 5" =>  "", "3, 6" =>  "", "3, 7" =>  "", "3, 8" => "2",
                              "4, 0" =>  "", "4, 1" => "1", "4, 2" => "8", "4, 3" => "3", "4, 4" => "4", "4, 5" => "2", "4, 6" => "9", "4, 7" => "6", "4, 8" =>  "",
                              "5, 0" => "2", "5, 1" =>  "", "5, 2" =>  "", "5, 3" =>  "", "5, 4" => "6", "5, 5" =>  "", "5, 6" =>  "", "5, 7" => "4", "5, 8" =>  "",
                              "6, 0" => "9", "6, 1" => "2", "6, 2" =>  "", "6, 3" =>  "", "6, 4" =>  "", "6, 5" =>  "", "6, 6" => "7", "6, 7" => "6", "6, 8" =>  "",
                              "7, 0" =>  "", "7, 1" => "7", "7, 2" => "4", "7, 3" => "6", "7, 4" =>  "", "7, 5" => "9", "7, 6" => "8", "7, 7" =>  "", "7, 8" =>  "",
                              "8, 0" => "3", "8, 1" =>  "", "8, 2" =>  "", "8, 3" =>  "", "8, 4" =>  "", "8, 5" => "2", "8, 6" => "4", "8, 7" =>  "", "8, 8" =>  "",
                              }
    assert_equal assigns(:puzzle).id, 2
    patch :update, id: 2, puzzle: { "0, 0" => "6", "0, 1" => "4", "0, 2" => "9", "0, 3" => "5", "0, 4" => "1", "0, 5" => "3", "0, 6" => "2", "0, 7" => "7", "0, 8" => "8",
                                              "1, 0" => "2", "1, 1" => "3", "1, 2" => "5", "1, 3" => "7", "1, 4" => "8", "1, 5" => "6", "1, 6" => "4", "1, 7" => "9", "1, 8" => "1",
                                              "2, 0" => "8", "2, 1" => "7", "2, 2" => "1", "2, 3" => "9", "2, 4" => "2", "2, 5" => "4", "2, 6" => "6", "2, 7" => "3", "2, 8" => "5",
                                              "3, 0" => "4", "3, 1" => "3", "3, 2" => "6", "3, 3" => "1", "3, 4" => "9", "3, 5" => "7", "3, 6" => "8", "3, 7" => "5", "3, 8" => "2",
                                              "4, 0" => "5", "4, 1" => "1", "4, 2" => "8", "4, 3" => "3", "4, 4" => "4", "4, 5" => "2", "4, 6" => "9", "4, 7" => "6", "4, 8" => "7",
                                              "5, 0" => "2", "5, 1" => "9", "5, 2" => "7", "5, 3" => "5", "5, 4" => "6", "5, 5" => "8", "5, 6" => "1", "5, 7" => "4", "5, 8" => "3",
                                              "6, 0" => "9", "6, 1" => "2", "6, 2" => "5", "6, 3" => "3", "6, 4" => "8", "6, 5" => "4", "6, 6" => "7", "6, 7" => "6", "6, 8" => "1",
                                              "7, 0" => "1", "7, 1" => "7", "7, 2" => "4", "7, 3" => "6", "7, 4" => "5", "7, 5" => "9", "7, 6" => "8", "7, 7" => "2", "7, 8" => "3",
                                              "8, 0" => "3", "8, 1" => "8", "8, 2" => "6", "8, 3" => "7", "8, 4" => "1", "8, 5" => "2", "8, 6" => "4", "8, 7" => "5", "8, 8" => "9"
                                              } 
    assert_equal assigns(:puzzle).send("0, 0"), "6"
    assert_equal assigns(:puzzle).send("0, 1"), "4"
    assert_equal assigns(:puzzle).send("8, 2"), "6"
    assert_equal assigns(:puzzle).send("8, 3"), "7"
    assert_equal assigns(:puzzle).send("7, 0"), "1"
    assert_equal assigns(:puzzle).send("5, 1"), "9"
    get :revert_puzzle, id: 2
    assert_equal assigns(:puzzle).send("0, 0"), ""
    assert_equal assigns(:puzzle).send("0, 1"), ""
    assert_equal assigns(:puzzle).send("8, 2"), ""
    assert_equal assigns(:puzzle).send("8, 3"), ""
    assert_equal assigns(:puzzle).send("7, 0"), ""
    assert_equal assigns(:puzzle).send("5, 1"), ""

  end

end


#validations for numbers
